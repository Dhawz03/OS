1 - In the main program we have used the fork() function call to create a process.Then we have checked different conditions for different values of rc returned by fork() function call.If rc is less than 0 that means fork has failed.Both the parent and child processes continue executing independently from the line immediately after the fork()  call.Then we print the PID of parent using the getpid() function call.Then we use the wait() function call to let the parent wait for the execution of the child process.Child process prints its PID using the getpid() function call and the PID of its parent using the getppid() function call.After the child process completes, it exits, and the control goes back to the parent process.Then parent print the id of its child again using the getpid() function call.Orphaned child processes (whose parents terminate) are re-parented to the init process (usually with PID 1).

2 - In the main program we have used the vfork() function call to create a process.Then we have checked different conditions for different values of rc returned by vfork() call.If rc is less than 0 that means vfork has failed.Both the parent and child processes continue executing independently from the line immediately after the vfork()  call.Then we print that the parent process has started.Then we use the wait() function call to let the parent wait for the execution of the child process.Child process calculates the factorial of 4 using a for loop.After the child process completes, it exits, and the control goes back to the parent process.Then parent prints the fibonacci series up to 16 terms.Orphaned child processes (whose parents terminate) are re-parented to the init process (usually with PID 1).

2_bonus - In the main program we have used the fork() function call to create a process.Then we have checked different conditions for different values of rc returned by vfork() call.If rc is less than 0 that means fork has failed.Both the parent and child processes continue executing independently from the line immediately after the fork() call.Then we print that the parent process has started.Then parent prints the fibonacci series up to 16 terms.
Child process calculates the factorial of 4 using a for loop.
